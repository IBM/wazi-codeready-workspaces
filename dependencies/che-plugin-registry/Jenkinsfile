#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// def FORCE_BUILD = "false"

// TODO source from eclipse/che-plugin-registry too

@Field String MIDSTM_BRANCH = "crw-2.5-rhel-8" // branch of GH and pkgs.devel repos to sync commits

def MIDSTM_REPO = "redhat-developer/codeready-workspaces" //source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-pluginregistry" // dist-git repo to use as target
def DWNSTM_BRANCH = MIDSTM_BRANCH // target branch in dist-git repo, eg., crw-2.5-rhel-8
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def QUAY_PROJECT = "pluginregistry" // also used for the Brew dockerfile params
def USE_DIGESTS = "true" // if true, use @sha256:digest in registry; if false, use :tag

def OLD_SHA=""

@Field String CRW_VERSION_F = ""
def String getCrwVersion(String MIDSTM_BRANCH) {
  if (CRW_VERSION_F.equals("")) {
    CRW_VERSION_F = sh(script: '''#!/bin/bash -xe
    curl -sSLo- https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/''' + MIDSTM_BRANCH + '''/dependencies/VERSION''', returnStdout: true).trim()
  }
  return CRW_VERSION_F
}

def installSkopeo(String CRW_VERSION)
{
sh '''#!/bin/bash -xe
pushd /tmp >/dev/null
# remove any older versions
sudo yum remove -y skopeo || true
# install from @kcrane build
if [[ ! -x /usr/local/bin/skopeo ]]; then
    sudo curl -sSLO "https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/crw-deprecated_''' + CRW_VERSION + '''/lastSuccessfulBuild/artifact/codeready-workspaces-deprecated/skopeo/target/skopeo-$(uname -m).tar.gz"
fi
if [[ -f /tmp/skopeo-$(uname -m).tar.gz ]]; then 
    sudo tar xzf /tmp/skopeo-$(uname -m).tar.gz --overwrite -C /usr/local/bin/
    sudo chmod 755 /usr/local/bin/skopeo
    sudo rm -f /tmp/skopeo-$(uname -m).tar.gz
fi
popd >/dev/null
skopeo --version
'''
}

def buildNode = "rhel7-releng" // node label
timeout(120) {
	node("${buildNode}"){ stage "Sync repos"
    wrap([$class: 'TimestamperBuildWrapper']) {
      cleanWs()
      CRW_VERSION = getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      installSkopeo(CRW_VERSION)
      withCredentials([string(credentialsId:'devstudio-release.token', variable: 'GITHUB_TOKEN'), 
        file(credentialsId: 'crw-build.keytab', variable: 'CRW_KEYTAB')]) {
      checkout([$class: 'GitSCM',
        branches: [[name: "${MIDSTM_BRANCH}"]],
        doGenerateSubmoduleConfigurations: false,
        credentialsId: 'devstudio-release',
        poll: true,
        extensions: [
          [$class: 'RelativeTargetDirectory', relativeTargetDir: "targetmid"],
          [$class: 'PathRestriction', excludedRegions: '', includedRegions: 'dependencies/che-plugin-registry/.*'],
          [$class: 'DisableRemotePoll']
        ],
        submoduleCfg: [],
        userRemoteConfigs: [[url: "https://github.com/${MIDSTM_REPO}.git"]]])

  	 	def BOOTSTRAP = '''#!/bin/bash -xe

# bootstrapping: if keytab is lost, upload to
# https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/credentials/store/system/domain/_/
# then set Use secret text above and set Bindings > Variable (path to the file) as ''' + CRW_KEYTAB + '''
chmod 700 ''' + CRW_KEYTAB + ''' && chown ''' + USER + ''' ''' + CRW_KEYTAB + '''
# create .k5login file
echo "crw-build/codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com@REDHAT.COM" > ~/.k5login
chmod 644 ~/.k5login && chown ''' + USER + ''' ~/.k5login
 echo "pkgs.devel.redhat.com,10.19.208.80 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAplqWKs26qsoaTxvWn3DFcdbiBxqRLhFngGiMYhbudnAj4li9/VwAJqLm1M6YfjOoJrj9dlmuXhNzkSzvyoQODaRgsjCG5FaRjuN8CSM/y+glgCYsWX1HFZSnAasLDuW0ifNLPR2RBkmWx61QKq+TxFDjASBbBywtupJcCsA5ktkjLILS+1eWndPJeSUJiOtzhoN8KIigkYveHSetnxauxv1abqwQTk5PmxRgRt20kZEFSRqZOJUlcl85sZYzNC/G7mneptJtHlcNrPgImuOdus5CW+7W49Z/1xqqWI/iRjwipgEMGusPMlSzdxDX4JzIx6R53pDpAwSAQVGDz4F9eQ==
" >> ~/.ssh/known_hosts

ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

# see https://mojo.redhat.com/docs/DOC-1071739
if [[ -f ~/.ssh/config ]]; then mv -f ~/.ssh/config{,.BAK}; fi
echo "
GSSAPIAuthentication yes
GSSAPIDelegateCredentials yes

Host pkgs.devel.redhat.com
User crw-build/codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com@REDHAT.COM
" > ~/.ssh/config
chmod 600 ~/.ssh/config

# initialize kerberos
export KRB5CCNAME=/var/tmp/crw-build_ccache
kinit "crw-build/codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com@REDHAT.COM" -kt ''' + CRW_KEYTAB + '''
klist # verify working

hasChanged=0

SOURCEDIR=${WORKSPACE}/targetmid/dependencies/che-plugin-registry
SOURCEDOCKERFILE=${SOURCEDIR}/Dockerfile
if [[ -f ${SOURCEDIR}/build/dockerfiles/rhel.Dockerfile ]]; then
  SOURCEDOCKERFILE=${SOURCEDIR}/build/dockerfiles/rhel.Dockerfile
fi

# REQUIRE: skopeo
curl -L -s -S https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/''' + MIDSTM_BRANCH + '''/product/updateBaseImages.sh -o /tmp/updateBaseImages.sh
chmod +x /tmp/updateBaseImages.sh
cd ${WORKSPACE}/targetmid
  git checkout --track origin/''' + MIDSTM_BRANCH + ''' || true
  export GITHUB_TOKEN=''' + GITHUB_TOKEN + ''' # echo "''' + GITHUB_TOKEN + '''"
  git config user.email "nickboldt+devstudio-release@gmail.com"
  git config user.name "Red Hat Devstudio Release Bot"
  git config --global push.default matching

  # SOLVED :: Fatal: Could not read Username for "https://github.com", No such device or address :: https://github.com/github/hub/issues/1644
  git remote -v
  git config --global hub.protocol https
  git remote set-url origin https://\$GITHUB_TOKEN:x-oauth-basic@github.com/''' + MIDSTM_REPO + '''.git
  git remote -v

  # Check if che-machine-exec and che-theia plugins are current in upstream repo and if not, add them
  pushd ${SOURCEDIR} >/dev/null
  ./build/scripts/add_che_plugins.sh -b ''' + MIDSTM_BRANCH + ''' $(cat ${WORKSPACE}/targetmid/pom.xml | grep -E "<che.version>" | sed -r -e "s#.+<che.version>(.+)</che.version>#\\1#")
  popd >/dev/null

  OLD_SHA=$(git rev-parse HEAD) # echo ${OLD_SHA:0:8}
  pushd ${SOURCEDOCKERFILE%/*} >/dev/null
    /tmp/updateBaseImages.sh -b ''' + MIDSTM_BRANCH + ''' -f ${SOURCEDOCKERFILE##*/} # just pass in rhel.Dockerfile
  popd >/dev/null
  NEW_SHA=$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
  if [[ "${OLD_SHA}" != "${NEW_SHA}" ]]; then hasChanged=1; fi
  SOURCE_SHA=$(git rev-parse HEAD) # echo ${SOURCE_SHA:0:8}
cd ..

# fetch sources to be updated
if [[ ! -d ${WORKSPACE}/targetdwn ]]; then git clone ssh://crw-build@pkgs.devel.redhat.com/''' + DWNSTM_REPO + ''' targetdwn; fi
cd ${WORKSPACE}/targetdwn
  git checkout --track origin/''' + DWNSTM_BRANCH + ''' || true
  git config user.email crw-build@REDHAT.COM
  git config user.name "CRW Build"
  git config --global push.default matching
'''
      sh BOOTSTRAP

      OLD_SHA = sh(script: '''#!/bin/bash -xe
      cd ${WORKSPACE}/targetdwn; git rev-parse HEAD
      ''', returnStdout: true)
      println "Got OLD_SHA in targetdwn folder: " + OLD_SHA

  	 	sh BOOTSTRAP + '''

# rsync files in github to dist-git
SYNC_FILES="build openshift v3 .gitignore .htaccess LICENSE README.md VERSION"
for d in ${SYNC_FILES}; do
  if [[ -f ${SOURCEDIR}/${d} ]]; then
    rsync -azrlt ${SOURCEDIR}/${d} ${WORKSPACE}/targetdwn/${d}
  elif [[ -d ${SOURCEDIR}/${d} ]]; then
    # copy over the dir contents
    rsync -azrlt ${SOURCEDIR}/${d}/* ${WORKSPACE}/targetdwn/${d}/
    # sync the directory and delete from targetdwn if deleted from source
    rsync -azrlt --delete ${SOURCEDIR}/${d}/ ${WORKSPACE}/targetdwn/${d}/
  else
    echo "[WARN] Could not find ${SOURCEDIR}/${d} to sync to ${WORKSPACE}/targetdwn/${d}"
  fi
done

cp -f ${SOURCEDOCKERFILE} ${WORKSPACE}/targetdwn/Dockerfile

CRW_VERSION="''' + CRW_VERSION_F + '''"
# apply patches to transform CRW upstream to pkgs.devel version
sed -i ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
  `# Replace image used for registry with rhel8/httpd-24` \
  -e 's|^ *FROM registry.access.redhat.com/.* AS registry|# &|' \
  -e 's|# *(FROM.*rhel8/httpd.*)|\\1|' \
  `# Strip registry from image references` \
  -e 's|FROM registry.access.redhat.com/|FROM |' \
  -e 's|FROM registry.redhat.io/|FROM |' \
  `# Set arg options: enable USE_DIGESTS and disable BOOTSTRAP` \
  -e 's|ARG USE_DIGESTS=.*|ARG USE_DIGESTS=''' + USE_DIGESTS + '''|' \
  -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=false|' \
  `# Enable offline build - copy in built binaries` \
  -e 's|# (COPY root-local.tgz)|\\1|' \
  `# only enable rhel8 here -- don't want centos or epel ` \
  -e 's|^ *(COPY .*)/content_set.*repo (.+)|\\1/content_sets_rhel8.repo \\2|' \
  `# Comment out PATCHED_* args from build and disable update_devfile_patched_image_tags.sh` \
  -e 's|^ *ARG PATCHED.*|# &|' \
  -e '/^ *RUN TAG/,+3 s|.*|# &| ' \
  `# Disable intermediate build targets` \
  -e 's|^ *FROM registry AS offline-registry|# &|' \
  -e '/^ *FROM builder AS offline-builder/,+3 s|.*|# &|' \
  -e 's|^[^#]*--from=offline-builder.*|# &|' \
  `# Enable cache_artifacts.sh` \
  -e '\\|swap_images.sh|i # Cache projects in CRW \\
COPY ./build/dockerfiles/rhel.cache_artifacts.sh resources.tgz /tmp/ \\
RUN /tmp/rhel.cache_artifacts.sh /build/v3/ && rm -rf /tmp/rhel.cache_artifacts.sh /tmp/resources.tgz \\
'

METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + QUAY_PROJECT + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + QUAY_PROJECT + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + QUAY_PROJECT + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile

echo "======= DOWNSTREAM DOCKERFILE =======>"
cat ${WORKSPACE}/targetdwn/Dockerfile
echo "<======= DOWNSTREAM DOCKERFILE ======="

# push changes in github to dist-git
cd ${WORKSPACE}/targetdwn
if [[ \$(git diff --name-only) ]]; then # file changed
	OLD_SHA=\$(git rev-parse HEAD) # echo ${OLD_SHA:0:8}
	git add Dockerfile ${SYNC_FILES}
	# note this might fail if we're syncing from a tag vs. a branch
	git commit -s -m "[sync] Update from ''' + MIDSTM_REPO + ''' @ ${SOURCE_SHA:0:8}" Dockerfile ${SYNC_FILES}
	/tmp/updateBaseImages.sh -b ''' + DWNSTM_BRANCH + ''' --nocommit
	git push origin ''' + DWNSTM_BRANCH + ''' || true
	NEW_SHA=\$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
	if [[ "${OLD_SHA}" != "${NEW_SHA}" ]]; then hasChanged=1; fi
	echo "[sync] Updated pkgs.devel @ ${NEW_SHA:0:8} from ''' + MIDSTM_REPO + ''' @ ${SOURCE_SHA:0:8}"
else
  # file not changed, but check if base image needs an update
  # (this avoids having 2 commits for every change)
  cd ${WORKSPACE}/targetdwn
  OLD_SHA=\$(git rev-parse HEAD) # echo ${OLD_SHA:0:8}
  /tmp/updateBaseImages.sh -b ''' + DWNSTM_BRANCH + '''
  NEW_SHA=\$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
  if [[ "${OLD_SHA}" != "${NEW_SHA}" ]]; then hasChanged=1; fi
  cd ..
fi
cd ..

# update tarballs - step 1 - build the container
cd ${WORKSPACE}/targetdwn

# transform Brew friendly Dockerfile so we can use it in Jenkins where base images need full registry path
sed ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
  -e 's|COPY (.*) resources.tgz (.*)|COPY \\1 \\2|' \
  -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=true|' \
  `# enable LATEST_ONLY for bootstrap build only` \
  -e 's|ARG LATEST_ONLY=.*|ARG LATEST_ONLY=true|' \
  -e 's|ARG USE_DIGESTS=.*|ARG USE_DIGESTS=''' + USE_DIGESTS + '''|' \
  -e 's|^ *COPY root-local.tgz|# &|' \
  `# replace org/container:tag with reg-proxy/rh-osbs/org-container:tag` \
  -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1-\\2:\\3#" \
  `# replace ubi8-minimal:tag with reg-proxy/rh-osbs/ubi-minimal:tag` \
  -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1:\\2#" \
  -e 's|# (COPY .*content_sets.*)|\\1|' \
  > ${WORKSPACE}/bootstrap.Dockerfile

echo "======= BOOTSTRAP DOCKERFILE =======>"
cat ${WORKSPACE}/bootstrap.Dockerfile
echo "<======= BOOTSTRAP DOCKERFILE ======="

echo "======= START BOOTSTRAP BUILD =======>"
# do not need digests in the BOOTSTRAP build so override default with false
CONTAINERNAME="''' + QUAY_PROJECT + '''offline"
docker build -t ${CONTAINERNAME} . --no-cache -f ${WORKSPACE}/bootstrap.Dockerfile \
  --target builder --build-arg BOOTSTRAP=true --build-arg USE_DIGESTS=false
echo "<======= END BOOTSTRAP BUILD ======="

# update tarballs - step 2 - check old sources' tarballs
cd ${WORKSPACE}/targetdwn
# TODO is there a better way to determine if we need to push sources? 
rhpkg sources

# update tarballs - step 3 - create tarballs in targetdwn folder
mkdir -p /tmp/root-local/ && docker run --rm -v \
  /tmp/root-local/:/tmp/root-local/ ${CONTAINERNAME} /bin/bash \
  -c "cd /root/.local/ && cp -r bin/ lib/ /tmp/root-local/"

# check diff
BEFORE_DIR=/tmp/root-local-before
rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/root-local.tgz -C ${BEFORE_DIR}
TAR_DIFF=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/root-local -x "*.pyc" -x "installed-files.txt") || true
if [[ ${TAR_DIFF} ]]; then
  echo "DIFF START *****"
  echo "${TAR_DIFF}"
  echo "***** END DIFF"
  pushd /tmp/root-local >/dev/null && sudo tar czf root-local.tgz lib/ bin/ && popd >/dev/null && mv -f /tmp/root-local/root-local.tgz . && sudo rm -fr /tmp/root-local/
fi

mkdir -p /tmp/''' + QUAY_PROJECT + '''-resources/
docker run --rm -v /tmp/''' + QUAY_PROJECT + '''-resources/:/tmp/''' + QUAY_PROJECT + '''-resources/ \
  --entrypoint /bin/bash ${CONTAINERNAME} -c \
  "cd /build && cp -r v3/* /tmp/''' + QUAY_PROJECT + '''-resources/"

# check diff
if [[ -f ${WORKSPACE}/targetdwn/resources.tgz ]]; then
  BEFORE_DIR=/tmp/''' + QUAY_PROJECT + '''-resources-before
  rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/resources.tgz -C ${BEFORE_DIR}
  TAR_DIFF2=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/''' + QUAY_PROJECT + '''-resources -x "resources/*" -x "*.vsix" -x "*.theia") || true
else
  TAR_DIFF2="No such file ${WORKSPACE}/targetdwn/resources.tgz -- creating a new one for the first time"
fi
if [[ ${TAR_DIFF2} ]]; then
  echo "DIFF START *****"
  echo "${TAR_DIFF2}"
  echo "***** END DIFF"
  pushd /tmp/''' + QUAY_PROJECT + '''-resources/ >/dev/null && \
    sudo tar czf resources.tgz ./* && \
    popd >/dev/null && \
    mv -f /tmp/''' + QUAY_PROJECT + '''-resources/resources.tgz . && \
    sudo rm -fr /tmp/''' + QUAY_PROJECT + '''-resources/
fi

# update tarballs - step 4 - commit changes if diff different
if [[ ${TAR_DIFF} ]] || [[ ${TAR_DIFF2} ]]; then
  hasChanged=1
  git pull origin ''' + DWNSTM_BRANCH + ''' || true
  rhpkg new-sources root-local.tgz resources.tgz
  git commit -s -m "[tgz] Update root-local.tgz and resources.tgz" sources
  git push origin ''' + DWNSTM_BRANCH + '''
else
  echo "No changes since previous tarball was created."
fi

# clean up diff dirs
sudo rm -fr /tmp/root-local /tmp/root-local-before /tmp/''' + QUAY_PROJECT + '''-resources /tmp/''' + QUAY_PROJECT + '''-resources-before

# NOTE: this image needs to build in Brew (CRW <=2.3), then rebuild for Quay, so use QUAY_REBUILD_PATH instead of QUAY_REPO_PATHs variable
# For CRW 2.4, do not rebuild (just copy to Quay) and use an ImageContentSourcePolicy file to resolve images
# https://gitlab.cee.redhat.com/codeready-workspaces/knowledge-base/-/blob/master/installStagingCRW.md#create-imagecontentsourcepolicy
if [[ ''' + FORCE_BUILD + ''' == "true" ]]; then hasChanged=1; fi
if [[ ${hasChanged} -eq 1 ]]; then
  for QRP in ''' + QUAY_PROJECT + '''; do
    QUAY_REPO_PATH=""; if [[ ''' + PUSH_TO_QUAY + ''' == "true" ]]; then QUAY_REPO_PATH="${QRP}-rhel8"; fi
    curl \
"https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/get-sources-rhpkg-container-build/buildWithParameters?\
token=CI_BUILD&\
cause=${QUAY_REPO_PATH}+respin+by+${BUILD_TAG}&\
GIT_BRANCH=''' + DWNSTM_BRANCH + '''&\
GIT_PATHs=containers/codeready-workspaces-${QRP}&\
QUAY_REPO_PATHs=${QUAY_REPO_PATH}&\
JOB_BRANCH=${CRW_VERSION}&\
FORCE_BUILD=true&\
SCRATCH=''' + SCRATCH + '''"
  done
fi

if [[ ${hasChanged} -eq 0 ]]; then
  echo "No changes upstream, nothing to commit"
fi
		  '''
    }
        def NEW_SHA = sh(script: '''#!/bin/bash -xe
        cd ${WORKSPACE}/targetdwn; git rev-parse HEAD
        ''', returnStdout: true)
        println "Got NEW_SHA in targetdwn folder: " + NEW_SHA

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
    }
	}
}
